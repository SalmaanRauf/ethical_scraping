import sqlite3
import pandas as pd
from datetime import date, datetime
from typing import List, Dict, Any
import os

class Reporter:
    def __init__(self, db_path='data/research.db'):
        self.db_path = db_path
        # Ensure reports directory exists
        os.makedirs('reports', exist_ok=True)

    def generate_report(self) -> str:
        """
        Queries DB for today's findings and generates a report.
        """
        today_str = date.today().isoformat()
        conn = sqlite3.connect(self.db_path)

        try:
            # Query for findings found today
            query = f"""
                SELECT 
                    date_found, company, headline, what_happened, 
                    why_it_matters, consulting_angle, source_url, 
                    event_type, value_usd, source_type
                FROM findings 
                WHERE date_found LIKE '{today_str}%'
                ORDER BY created_at DESC
            """
            
            df = pd.read_sql_query(query, conn)
            
            if df.empty:
                report_content = "# Daily Intelligence Report\n\n"
                report_content += f"**Date:** {today_str}\n\n"
                report_content += "## Summary\n\n"
                report_content += "No material updates found today.\n\n"
                report_content += "---\n"
                report_content += "*Report generated by Agentic Account Research System*"
            else:
                # Add Key Person columns as per requirements
                df['Key Person 1 (URL, Role, Score)'] = "N/A - Manual Lookup Required"
                df['Key Person 2 (URL, Role, Score)'] = "N/A - Manual Lookup Required"
                
                # Rename columns to match final schema
                df.rename(columns={
                    'date_found': 'Date', 
                    'company': 'Company', 
                    'headline': 'Headline', 
                    'what_happened': 'What Happened?', 
                    'why_it_matters': 'Why it Matters', 
                    'consulting_angle': 'Consulting Angle', 
                    'source_url': 'Source 1 (URL)',
                    'event_type': 'Event Type',
                    'value_usd': 'Value (USD)'
                }, inplace=True)
                
                # Reorder columns to match required output schema
                column_order = [
                    'Date', 'Company', 'Headline', 'What Happened?', 
                    'Why it Matters', 'Consulting Angle', 'Source 1 (URL)',
                    'Key Person 1 (URL, Role, Score)', 'Key Person 2 (URL, Role, Score)',
                    'Event Type', 'Value (USD)'
                ]
                
                # Only include columns that exist in the dataframe
                existing_columns = [col for col in column_order if col in df.columns]
                df = df[existing_columns]
                
                # Generate markdown report
                report_content = "# Daily Intelligence Report\n\n"
                report_content += f"**Date:** {today_str}\n\n"
                report_content += f"**Total Events Found:** {len(df)}\n\n"
                report_content += "## Summary\n\n"
                
                # Add summary statistics
                if 'Event Type' in df.columns:
                    event_counts = df['Event Type'].value_counts()
                    report_content += "**Events by Type:**\n"
                    for event_type, count in event_counts.items():
                        report_content += f"- {event_type}: {count}\n"
                    report_content += "\n"
                
                if 'Value (USD)' in df.columns:
                    total_value = df['Value (USD)'].sum()
                    if total_value > 0:
                        report_content += f"**Total Value:** ${total_value:,}\n\n"
                
                report_content += "## Detailed Findings\n\n"
                report_content += df.to_markdown(index=False)
                report_content += "\n\n---\n"
                report_content += "*Report generated by Agentic Account Research System*"

        except Exception as e:
            print(f"❌ Error generating report: {e}")
            report_content = f"# Error Generating Report\n\nError: {e}"
        finally:
            conn.close()

        # Save report to a file
        report_filename = f"reports/report-{today_str}.md"
        try:
            with open(report_filename, 'w', encoding='utf-8') as f:
                f.write(report_content)
            print(f"✅ Report generated: {report_filename}")
        except Exception as e:
            print(f"❌ Error saving report: {e}")

        return report_content

    def generate_csv_report(self) -> str:
        """
        Generate a CSV version of today's report.
        """
        today_str = date.today().isoformat()
        conn = sqlite3.connect(self.db_path)

        try:
            # Query for findings found today
            query = f"""
                SELECT 
                    date_found, company, headline, what_happened, 
                    why_it_matters, consulting_angle, source_url, 
                    event_type, value_usd, source_type
                FROM findings 
                WHERE date_found LIKE '{today_str}%'
                ORDER BY created_at DESC
            """
            
            df = pd.read_sql_query(query, conn)
            
            if not df.empty:
                # Add Key Person columns
                df['Key Person 1 (URL, Role, Score)'] = "N/A - Manual Lookup Required"
                df['Key Person 2 (URL, Role, Score)'] = "N/A - Manual Lookup Required"
                
                # Rename columns
                df.rename(columns={
                    'date_found': 'Date', 
                    'company': 'Company', 
                    'headline': 'Headline', 
                    'what_happened': 'What Happened?', 
                    'why_it_matters': 'Why it Matters', 
                    'consulting_angle': 'Consulting Angle', 
                    'source_url': 'Source 1 (URL)',
                    'event_type': 'Event Type',
                    'value_usd': 'Value (USD)'
                }, inplace=True)
                
                # Save CSV
                csv_filename = f"reports/report-{today_str}.csv"
                df.to_csv(csv_filename, index=False)
                print(f"✅ CSV report generated: {csv_filename}")
                return csv_filename
            else:
                print("No data found for CSV report")
                return ""
                
        except Exception as e:
            print(f"❌ Error generating CSV report: {e}")
            return ""
        finally:
            conn.close()

    def get_report_summary(self) -> Dict[str, Any]:
        """
        Get a summary of today's findings for quick review.
        """
        today_str = date.today().isoformat()
        conn = sqlite3.connect(self.db_path)

        try:
            # Get basic counts
            cursor = conn.cursor()
            cursor.execute(f"SELECT COUNT(*) FROM findings WHERE date_found LIKE '{today_str}%'")
            total_findings = cursor.fetchone()[0]
            
            # Get event type breakdown
            cursor.execute(f"""
                SELECT event_type, COUNT(*) 
                FROM findings 
                WHERE date_found LIKE '{today_str}%' 
                GROUP BY event_type
            """)
            event_breakdown = dict(cursor.fetchall())
            
            # Get total value
            cursor.execute(f"""
                SELECT SUM(value_usd) 
                FROM findings 
                WHERE date_found LIKE '{today_str}%' AND value_usd > 0
            """)
            total_value = cursor.fetchone()[0] or 0
            
            return {
                'date': today_str,
                'total_findings': total_findings,
                'event_breakdown': event_breakdown,
                'total_value': total_value
            }
            
        except Exception as e:
            print(f"❌ Error getting report summary: {e}")
            return {}
        finally:
            conn.close() 